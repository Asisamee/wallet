diff --git a/node_modules/expo-secure-store/ios/EXSecureStore/EXSecureStore.m b/node_modules/expo-secure-store/ios/EXSecureStore/EXSecureStore.m
index 8ef26c4..5f085de 100644
--- a/node_modules/expo-secure-store/ios/EXSecureStore/EXSecureStore.m
+++ b/node_modules/expo-secure-store/ios/EXSecureStore/EXSecureStore.m
@@ -4,6 +4,7 @@
 
 #import <CommonCrypto/CommonHMAC.h>
 #import <Security/Security.h>
+#import <LocalAuthentication/LocalAuthentication.h>
 
 @implementation EXSecureStore
 
@@ -38,8 +39,22 @@ - (BOOL)_setValue:(NSString *)value withKey:(NSString *)key withOptions:(NSDicti
   if (![requireAuth boolValue]) {
     [dictionary setObject:(__bridge id)accessibility forKey:(__bridge id)kSecAttrAccessible];
   } else {
-    SecAccessControlRef accessOptions = SecAccessControlCreateWithFlags(nil, accessibility, kSecAccessControlBiometryCurrentSet, nil);
-    [dictionary setObject:(__bridge_transfer id)accessOptions forKey:(__bridge id)kSecAttrAccessControl];
+    // check if has biometric authentication
+    BOOL hasBiometricAuthentication = NO;
+    if (@available(iOS 11.3, *)) {
+      LAContext *context = [[LAContext alloc] init];
+      if ([context canEvaluatePolicy:LAPolicyDeviceOwnerAuthenticationWithBiometrics error:nil]) {
+        hasBiometricAuthentication = YES;
+      }
+    }
+
+    if (!hasBiometricAuthentication) {
+      SecAccessControlRef accessOptions = SecAccessControlCreateWithFlags(nil, accessibility, kSecAccessControlDevicePasscode, nil);
+      [dictionary setObject:(__bridge_transfer id)accessOptions forKey:(__bridge id)kSecAttrAccessControl];
+    } else {
+      SecAccessControlRef accessOptions = SecAccessControlCreateWithFlags(nil, accessibility, kSecAccessControlBiometryCurrentSet, nil);
+      [dictionary setObject:(__bridge_transfer id)accessOptions forKey:(__bridge id)kSecAttrAccessControl];
+    }
   }
 
   OSStatus status = SecItemAdd((__bridge CFDictionaryRef)dictionary, NULL);
